/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never }
type XOR<T, U> = T | U extends object
    ? (Without<T, U> & U) | (Without<U, T> & T)
    : T | U
type OneOf<T extends any[]> = T extends [infer Only]
    ? Only
    : T extends [infer A, infer B, ...infer Rest]
      ? OneOf<[XOR<A, B>, ...Rest]>
      : never

export interface paths {
    '/accounts/{address}': {
        /**
         * Retrieve account details
         * @description Retrieve information about an account or a contract identified by its `address`.
         *
         * To access historical details, you can specify a `revision` as a query parameter.
         */
        get: {
            parameters: {
                query?: {
                    revision?: components['parameters']['RevisionInQuery']
                }
                path: {
                    address: components['parameters']['GetAddressInPath']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['GetAccountResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/accounts/*': {
        /**
         * Inspect clauses
         * @description This endpoint can be used for various purposes:
         *
         *   - Read contract state.
         *   - Simulate the execution of a transaction. This can be useful to determine if your transaction may revert before submitting it.
         *   - Inspect the outputs of a transaction before executing it.
         *   - Estimate the gas consumption of a transaction. <b>Note:</b> The `caller` field should be provided for higher accuracy.
         *
         * The fields `gasPrice`, `gasPayer`, `provedWork`, `blockRef` and `expiration` are for exposing themselves in EVM. Transaction meta features won't be reflected in the result, for example, no error is returned if the transaction is technically expired. For more information, please refer to the vechain documentation.
         *
         * To access historical details, you can specify a `revision` as a query parameter.
         */
        post: {
            parameters: {
                query?: {
                    revision?: components['parameters']['RevisionInQuery']
                }
            }
            requestBody: {
                content: {
                    'application/json': components['schemas']['ExecuteCodesRequest']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['ExecuteCodesResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/accounts/{address}/code': {
        /**
         * Retrieve a contract's bytecode
         * @description If the provided address is not a contract, empty bytecode is returned.
         */
        get: {
            parameters: {
                query?: {
                    revision?: components['parameters']['RevisionInQuery']
                }
                path: {
                    address: components['parameters']['GetAddressInPath']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['GetAccountCodeResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
        parameters: {
            query?: {
                revision?: components['parameters']['RevisionInQuery']
            }
            path: {
                address: components['parameters']['GetAddressInPath']
            }
        }
    }
    '/accounts/{address}/storage/{key}': {
        /**
         * Retrieve the value for a storage position
         * @description This endpoint allows you to retrieve the value stored at a specific storage position (`{key}`) of a Vechain smart contract associated with the provided address (`{address}`). The response will contain information about the stored value for the given key.
         *
         * To access historical details, you can specify a `revision` as a query parameter.
         */
        get: {
            parameters: {
                query?: {
                    revision?: components['parameters']['RevisionInQuery']
                }
                path: {
                    address: components['parameters']['GetStorageAddressInPath']
                    key: components['parameters']['StorageKeyInPath']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['GetStorageResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
        parameters: {
            query?: {
                revision?: components['parameters']['RevisionInQuery']
            }
            path: {
                address: components['parameters']['GetStorageAddressInPath']
                key: components['parameters']['StorageKeyInPath']
            }
        }
    }
    '/transactions/{id}': {
        /**
         * Retrieve a transaction by ID
         * @description This endpoint allows you to retrieve a transaction identified by its ID. If the `pending` parameter is set to true, the response may include a pending transaction with a null `meta` field. Use this option when you want to retrieve pending transactions, providing flexibility in accessing real-time transaction data.
         *
         * If no transaction is found, the response will be be a `200` with a `null` body.
         */
        get: {
            parameters: {
                query?: {
                    raw?: components['parameters']['RawTxInQuery']
                    head?: components['parameters']['HeadInQuery']
                    pending?: components['parameters']['PendingInQuery']
                }
                path: {
                    id: components['parameters']['TxIDInPath']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['GetTxResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/transactions/{id}/receipt': {
        /**
         * Retrieve transaction receipt
         * @description This endpoint allows you to retrieve the receipt of a transaction identified by its ID. If the transaction is not found, the response will be `null`.
         */
        get: {
            parameters: {
                query?: {
                    head?: components['parameters']['HeadInQuery']
                }
                path: {
                    id: components['parameters']['TxIDInPath']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['GetTxReceiptResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/transactions': {
        /**
         * Send a transaction
         * @description This endpoint allows you to send a transaction to the blockchain. The transaction must be signed and RLP encoded.
         *
         * The below is a TypeScript example of how to sign and RLP encode a transaction using the `thor-devkit` library:
         *
         * ```typescript
         * import { Transaction, secp256k1 } from 'thor-devkit'
         *
         * const clauses = [{
         *     to: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed',
         *     value: 10000,
         *     data: '0x'
         * }]
         *
         * let body: Transaction.Body = {
         *     chainTag: '0x4a',
         *     blockRef: '0x0000000000000000',
         *     expiration: 32,
         *     clauses: clauses,
         *     gasPriceCoef: 128,
         *     gas: Transaction.intrinsicGas(clauses),
         *     dependsOn: null,
         *     nonce: 12345678
         * }
         *
         * const tx = new Transaction(body)
         * const signingHash = tx.signingHash()
         * tx.signature = secp256k1.sign(signingHash, Buffer.from("99f0500549792796c14fed62011a51081dc5b5e68fe8bd8a13b86be829c4fd36", "hex"))
         *
         * const raw = tx.encode()
         * const decoded = Transaction.decode(raw)
         *
         * axios.post('http://localhost:8669/transactions', {
         *   raw: '0x' + raw.toString('hex')
         * })
         * ```
         */
        post: {
            requestBody: {
                content: {
                    'application/json': components['schemas']['RawTx']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['TXID']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
                /** @description Forbidden */
                403: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/blocks/{revision}': {
        /**
         * Retrieve a block
         * @description
         * Retrieve information about a block identified by its `revision`.
         *
         * If the provided `revision` is not found, the response will be `null`
         */
        get: {
            parameters: {
                query?: {
                    expanded?: components['parameters']['ExpandedInQuery']
                }
                path: {
                    revision: components['parameters']['RevisionInPath']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['GetBlockResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/logs/event': {
        /**
         * Query smart contract events
         * @description Query event logs generated by vechain smart contracts. Events are created using the `LOG` opcode in the Ethereum Virtual Machine (EVM).
         *
         * Event logs provide a way to track specific occurrences and state changes within a smart contract. By querying these logs, you can gain insights into the history of events emitted by a particular contract.
         */
        post: {
            requestBody: {
                content: {
                    'application/json': components['schemas']['EventLogFilterRequest']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['EventLogsResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/logs/transfer': {
        /**
         * Query VET transfer events
         * @description Query VET transfers with a given criteria.
         */
        post: {
            requestBody: {
                content: {
                    'application/json': components['schemas']['TransferLogFilterRequest']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['TransferLogsResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/node/network/peers': {
        /**
         * Retrieve connected peers
         * @description Retrieve information about the peers connected to the node.
         */
        get: {
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['GetPeersResponse']
                    }
                }
            }
        }
    }
    '/subscriptions/block': {
        /**
         * (Websocket) Blocks
         * @description Establish a websocket connection to the node to receive real-time updates on new blocks.
         *
         * This endpoint can also be used to resume a subscription from a specific point in time.
         *
         *
         * Example:
         *
         * ```javascript
         * const ws = new WebSocket('ws://localhost:8669/subscriptions/block')
         *
         * ws.onmessage = (event) => {
         *   console.log(event.data)
         * }
         * ```
         */
        get: {
            parameters: {
                query?: {
                    pos?: components['parameters']['PositionInQuery']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['SubscriptionBlockResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
                /** @description Forbidden */
                403: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/subscriptions/event': {
        /**
         * (Websocket) Events
         * @description Subscribe to events generated by vechain smart contracts. Events are created using the `LOG` opcode in the Ethereum Virtual Machine (EVM).
         *
         * Example:
         *
         * ```javascript
         *
         * // Filter the events by 'Transfer(address,address,uint256)'
         * const ws = new WebSocket('ws://localhost:8669/subscriptions/event?t0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef')
         *
         * ws.onmessage = (event) => {
         *   console.log(event.data)
         * }
         * ```
         */
        get: {
            parameters: {
                query?: {
                    pos?: components['parameters']['PositionInQuery']
                    addr?: components['parameters']['AddrInQuery']
                    t0?: components['parameters']['Topic0InQuery']
                    t1?: components['parameters']['Topic1InQuery']
                    t2?: components['parameters']['Topic2InQuery']
                    t3?: components['parameters']['Topic3InQuery']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['SubscriptionEventResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
                /** @description Forbidden */
                403: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/subscriptions/transfer': {
        /**
         * (Websocket) Transfers
         * @description Subscribe to VET transfers with a given criteria.
         *
         * Example:
         *
         * ```javascript
         * const ws = new WebSocket('ws://localhost:8669/subscriptions/transfer?sender=0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa')
         *
         * ws.onmessage = (event) => {
         *   console.log(event.data)
         * }
         * ```
         */
        get: {
            parameters: {
                query?: {
                    pos?: components['parameters']['PositionInQuery']
                    txOrigin?: components['parameters']['TxOriginInQuery']
                    recipient?: components['parameters']['TransferRecipientInQuery']
                    sender?: components['parameters']['TransferSenderInQuery']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['SubscriptionEventResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
                /** @description Forbidden */
                403: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/subscriptions/beat2': {
        /**
         * (Websocket) Beats
         * @description Establish a websocket connection to receive blockchain beats, which contain a summary of new blocks and bloom filters composited with affected addresses.
         *
         * Example:
         *
         * ```javascript
         * const ws = new WebSocket('ws://localhost:8669/subscriptions/beat2')
         *
         * ws.onmessage = (event) => {
         *   console.log(event.data)
         * }
         * ```
         */
        get: {
            parameters: {
                query?: {
                    pos?: components['parameters']['PositionInQuery']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['SubscriptionBeat2Response']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
                /** @description Forbidden */
                403: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/subscriptions/txpool': {
        /**
         * (Websocket) Subscribe to new transactions
         * @description Establish a websocket connection to receive real-time updates on transactions that are pending inclusion in a future block.
         *
         * Example:
         *
         * ```javascript
         * const ws = new WebSocket('ws://localhost:8669/subscriptions/txpool')
         *
         * ws.onmessage = (event) => {
         *   console.log(event.data)
         * }
         * ```
         */
        get: {
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['TXID']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
                /** @description Forbidden */
                403: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/subscriptions/beat': {
        /**
         * (Websocket) Subscribe to Blockchain Beats
         * @deprecated
         * @description Establish a websocket connection to receive blockchain beats, which contain a summary of new blocks and bloom filters composited with affected addresses.
         *
         * Example:
         *
         * ```javascript
         * const ws = new WebSocket('ws://localhost:8669/subscriptions/beat')
         *
         * ws.onmessage = (event) => {
         *   console.log(event.data)
         * }
         * ```
         */
        get: {
            parameters: {
                query?: {
                    pos?: components['parameters']['PositionInQuery']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['SubscriptionBeatResponse']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
                /** @description Forbidden */
                403: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/debug/tracers': {
        /**
         * Trace a transaction clause
         * @description This endpoint allows you to create a tracer for a specific clause. Tracers are instrumental in monitoring and analyzing the execution flow within the EVM.
         * You can customize the tracer using various options to tailor it to your specific debugging needs.
         */
        post: {
            requestBody: {
                content: {
                    'application/json': components['schemas']['PostDebugTracerRequest']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': Record<string, never>
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/debug/tracers/call': {
        /**
         * Trace a contract call
         * @description This endpoint enables clients to create a tracer for a specific vechain function call.
         *
         * You can customize the tracer using various options to suit your debugging requirements.
         */
        post: {
            parameters: {
                query?: {
                    head?: components['parameters']['HeadInQuery']
                }
            }
            requestBody: {
                content: {
                    'application/json': components['schemas']['PostDebugTracerCallRequest']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': Record<string, never>
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
    '/debug/storage-range': {
        /**
         * Retrieve storage range
         * @description The endpoint retrieves storage entries related to a particular clause execution and contract address. This
         * could be useful for inspecting or analyzing storage changes.
         */
        post: {
            requestBody: {
                content: {
                    'application/json': components['schemas']['StorageRangeOption']
                }
            }
            responses: {
                /** @description OK */
                200: {
                    content: {
                        'application/json': components['schemas']['StorageRange']
                    }
                }
                /** @description Bad Request */
                400: {
                    content: {
                        'text/plain': string
                    }
                }
            }
        }
    }
}

export type webhooks = Record<string, never>

export interface components {
    schemas: {
        /**
         * GetAccountResponse
         * @example {
         *   "balance": "0x47ff1f90327aa0f8e",
         *   "energy": "0xcf624158d591398",
         *   "hasCode": false
         * }
         */
        GetAccountResponse: {
            /**
             * @description VET balance in wei, presented as a hexadecimal string.
             * @example 0x47ff1f90327aa0f8e
             */
            balance?: string
            /**
             * @description Energy (VTHO) in wei, presented as a hexadecimal string.
             * @example 0xcf624158d591398
             */
            energy?: string
            /**
             * @description Indicates whether the account is a contract (true) or not (false).
             * @example false
             */
            hasCode?: boolean
        }
        /**
         * ExecuteCodesRequest
         * @example {
         *   "gas": 50000,
         *   "gasPrice": "1000000000000000",
         *   "caller": "0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa",
         *   "provedWork": "1000",
         *   "gasPayer": "0xd3ae78222beadb038203be21ed5ce7c9b1bff602",
         *   "expiration": 1000,
         *   "blockRef": "0x00000000851caf3c",
         *   "clauses": [
         *     {
         *       "to": "0x0000000000000000000000000000456E65726779",
         *       "value": "0x0",
         *       "data": "0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db50000000000000000000000000000000000000000000000013f306a2409fc0000"
         *     },
         *     {
         *       "to": "0xf077b491b355E64048cE21E3A6Fc4751eEeA77fa",
         *       "value": "0x6124fee993bc00000",
         *       "data": "0x"
         *     },
         *     {
         *       "to": null,
         *       "value": "0x0",
         *       "data": "0x6080604052348015600f57600080fd5b50609f8061001e6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631820cabb146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b62015180815600a165627a7a723058200ac7475da248e2fc26c057319e296e90c24d5f8b9bf956fb3b77545642cad3b10029"
         *     }
         *   ]
         * }
         */
        ExecuteCodesRequest: components['schemas']['ExtendedCallData'] &
            components['schemas']['BatchCallData']
        /**
         * ExecuteCodesResponse
         * @example [
         *   {
         *     "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
         *     "events": [
         *       {
         *         "address": "0x0000000000000000000000000000456e65726779",
         *         "topics": [
         *           "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
         *           "0x000000000000000000000000435933c8064b4ae76be665428e0307ef2ccfbd68",
         *           "0x0000000000000000000000000f872421dc479f3c11edd89512731814d0598db5"
         *         ],
         *         "data": "0x0000000000000000000000000000000000000000000000013f306a2409fc0000"
         *       }
         *     ],
         *     "transfers": [],
         *     "gasUsed": 13326,
         *     "reverted": false,
         *     "vmError": ""
         *   },
         *   {
         *     "data": "0x",
         *     "events": [],
         *     "transfers": [
         *       {
         *         "sender": "0x435933c8064b4ae76be665428e0307ef2ccfbd68",
         *         "recipient": "0xf077b491b355e64048ce21e3a6fc4751eeea77fa",
         *         "amount": "0x6124fee993bc00000"
         *       }
         *     ],
         *     "gasUsed": 0,
         *     "reverted": false,
         *     "vmError": ""
         *   },
         *   {
         *     "data": "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631820cabb146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b62015180815600a165627a7a723058200ac7475da248e2fc26c057319e296e90c24d5f8b9bf956fb3b77545642cad3b10029",
         *     "events": [
         *       {
         *         "address": "0xecadd5492c1fa085e40e2c17e79f1a03f38f86ca",
         *         "topics": [
         *           "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
         *         ],
         *         "data": "0x000000000000000000000000435933c8064b4ae76be665428e0307ef2ccfbd68"
         *       }
         *     ],
         *     "transfers": [],
         *     "gasUsed": 31881,
         *     "reverted": false,
         *     "vmError": ""
         *   }
         * ]
         */
        ExecuteCodesResponse: components['schemas']['CallResult'][]
        /**
         * GetAccountCodeResponse
         * @example {
         *   "code": "0x6060604052600080fd00a165627a7a72305820c23d3ae2dc86ad130561a2829d87c7cb8435365492bd1548eb7e7fc0f3632be90029"
         * }
         */
        GetAccountCodeResponse: {
            /**
             * @description Contract bytecode, presented as a hexadecimal string.
             * @example 0x6060604052600080fd00a165627a7a72305820c23d3ae2dc86ad130561a2829d87c7cb8435365492bd1548eb7e7fc0f3632be90029
             */
            code?: string
        }
        /**
         * GetStorageResponse
         * @example {
         *   "value": "0x0000000000000000000000000000000000000000000000000000000000000001"
         * }
         */
        GetStorageResponse: {
            /**
             * @description The value stored at the given storage position.
             * @example 0x0000000000000000000000000000000000000000000000000000000000000001
             */
            value?: string
        }
        /**
         * GetTxResponse
         * @example {
         *   "id": "0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8",
         *   "chainTag": 1,
         *   "blockRef": "0x00000001511fc0be",
         *   "expiration": 30,
         *   "clauses": [],
         *   "gasPriceCoef": 128,
         *   "gas": 21000,
         *   "origin": "0x7567d83b7b8d80addcb281a71d54fc7b3364ffed",
         *   "delegator": null,
         *   "nonce": "0xd92966da424d9939",
         *   "dependsOn": null,
         *   "size": 180,
         *   "meta": {
         *     "blockID": "0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327",
         *     "blockNumber": 1,
         *     "blockTimestamp": 1523156271
         *   }
         * }
         */
        GetTxResponse: OneOf<
            [
                components['schemas']['Tx'] & {
                    meta?: components['schemas']['TxMeta']
                },
                components['schemas']['RawTx'] & {
                    meta?: components['schemas']['TxMeta']
                },
            ]
        >
        /** GetTxReceiptResponse */
        GetTxReceiptResponse: components['schemas']['Receipt'] & {
            meta?: components['schemas']['ReceiptMeta']
        }
        /**
         * GetBlockResponse
         * @description The response will contain information about the block identified by the provided `revision`.
         *
         * @example {
         *   "number": 325324,
         *   "id": "0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215",
         *   "size": 373,
         *   "parentID": "0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d",
         *   "timestamp": 1533267900,
         *   "gasLimit": 11253579,
         *   "beneficiary": "0xb4094c25f86d628fdd571afc4077f0d0196afb48",
         *   "gasUsed": 21000,
         *   "totalScore": 1029988,
         *   "txsRoot": "0x89dfd9fcd10c9e53d68592cf8b540b280b72d381b868523223992f3e09a806bb",
         *   "txsFeatures": 0,
         *   "stateRoot": "0x86bcc6d214bc9d8d0dedba1012a63c8317d19ce97f60c8a2ef5c59bbd40d4261",
         *   "receiptsRoot": "0x15787e2533c470e8a688e6cd17a1ee12d8457778d5f82d2c109e2d6226d8e54e",
         *   "com": true,
         *   "signer": "0xab7b27fc9e7d29f9f2e5bd361747a5515d0cc2d1",
         *   "isTrunk": true,
         *   "isFinalized": false,
         *   "transactions": [
         *     "0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477"
         *   ]
         * }
         */
        GetBlockResponse:
            | components['schemas']['RegularBlockResponse']
            | components['schemas']['ExpandedBlockResponse']
        /**
         * RegularBlockResponse
         * @description The response will contain information about the block identified by the provided `revision`. The `transactions`
         * field contains an array of transaction IDs.
         */
        RegularBlockResponse: components['schemas']['Block'] &
            components['schemas']['IsTrunk'] &
            components['schemas']['IsFinalized'] & {
                /** @description An array of transaction IDs */
                transactions?: string[]
            }
        /**
         * ExpandedBlockResponse
         * @description The response will contain information about the block identified by the provided `revision`. The `transactions`
         * field contains an array of transactions, expanded to include their receipts.
         */
        ExpandedBlockResponse: components['schemas']['Block'] &
            components['schemas']['IsTrunk'] &
            components['schemas']['IsFinalized'] & {
                /** @description All included transactions, expanded, to include their receipts */
                transactions?: (components['schemas']['Tx'] &
                    components['schemas']['Receipt'])[]
            }
        /** EventLogFilterRequest */
        EventLogFilterRequest: {
            range?: components['schemas']['FilterRange']
            options?: components['schemas']['FilterOptions']
            criteriaSet?: components['schemas']['EventCriteria'][] | null
            /**
             * @description Specifies the order of the results. Use `asc` for ascending order, and `desc` for descending order.
             *
             * Default value: `asc`
             *
             * @enum {string|null}
             */
            order?: 'asc' | 'desc' | null
        }
        /** EventLogsResponse */
        EventLogsResponse: (components['schemas']['Event'] & {
            meta?: components['schemas']['LogMeta']
        })[]
        /** TransferLogFilterRequest */
        TransferLogFilterRequest: {
            range?: components['schemas']['FilterRange']
            options?: components['schemas']['FilterOptions']
            criteriaSet?: components['schemas']['TransferCriteria'][] | null
            /**
             * @description Specifies the order of the results. Use `asc` for ascending order, and `desc` for descending order.
             *
             * @enum {string|null}
             */
            order?: 'asc' | 'desc' | null
        }
        /** TransferLogsResponse */
        TransferLogsResponse: (components['schemas']['Transfer'] & {
            meta?: components['schemas']['LogMeta']
        })[]
        /** GetPeersResponse */
        GetPeersResponse: components['schemas']['PeerStats'][]
        /** SubscriptionBlockResponse */
        SubscriptionBlockResponse: components['schemas']['Block'] &
            components['schemas']['Obsolete'] & {
                /** @description An array of transaction IDs associated with the block. */
                transactions?: string[]
            }
        /** SubscriptionEventResponse */
        SubscriptionEventResponse: components['schemas']['Event'] &
            components['schemas']['Obsolete'] & {
                meta?: components['schemas']['LogMeta']
            }
        /** SubscriptionTransferResponse */
        SubscriptionTransferResponse: components['schemas']['Transfer'] &
            components['schemas']['Obsolete'] & {
                meta?: components['schemas']['LogMeta']
            }
        /** SubscriptionBeat2Response */
        SubscriptionBeat2Response: components['schemas']['SubscriptionBeatResponse'] & {
            /**
             * Format: uint64
             * @description The gas limit of the block
             *
             * @example 12000000
             */
            gasLimit?: number
        }
        /** SubscriptionBeatResponse */
        SubscriptionBeatResponse: components['schemas']['Obsolete'] & {
            /**
             * Format: uint32
             * @description The block number (height)
             *
             * @example 325324
             */
            number?: number
            /**
             * Format: hex
             * @description The block identifier
             *
             * @example 0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215
             */
            id?: string
            /**
             * Format: hex
             * @description The parent block identifier
             *
             * @example 0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d
             */
            parentID?: string
            /**
             * Format: uint64
             * @description The UNIX timestamp of the block
             *
             * @example 1533267900
             */
            timestamp?: number
            /**
             * Format: uint32
             * @description The supported transaction features bitset
             *
             * @example 0
             */
            txsFeatures?: number
            /**
             * Format: hex
             * @description A hexadecimal representation of the bloom filter composed with affected addresses & topics.
             *
             * The bloom filter is used to efficiently check whether an element is a member of a set,
             * providing a summary of affected addresses related to new blocks.
             *
             * @example 0x0424c1ff47029280
             */
            bloom?: string
            /**
             * Format: uint32
             * @description The number of hash functions for bloom filter
             *
             * @example 13
             */
            k?: number
        }
        /**
         * PostDebugTracerRequest
         * @example {
         *   "target": "0x010709463c1f0c9aa66a31182fb36d1977d99bfb6526bae0564a0eac4006c31a/0/0",
         *   "name": "prestate",
         *   "config": {}
         * }
         */
        PostDebugTracerRequest: components['schemas']['TracerOption'] &
            components['schemas']['ClauseTracerOption']
        /**
         * PostDebugTracerCallRequest
         * @example {
         *   "value": "0x0",
         *   "to": "0x0000000000000000000000000000456E65726779",
         *   "data": "0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db50000000000",
         *   "gas": 50000,
         *   "gasPrice": "1000000000000000",
         *   "caller": "0x7567d83b7b8d80addcb281a71d54fc7b3364ffed",
         *   "provedWork": "1000",
         *   "gasPayer": "0xd3ae78222beadb038203be21ed5ce7c9b1bff602",
         *   "expiration": 1000,
         *   "blockRef": "0x00000000851caf3c"
         * }
         */
        PostDebugTracerCallRequest: components['schemas']['TracerOption'] &
            components['schemas']['CallData'] &
            components['schemas']['ExtendedCallData']
        /**
         * TxMeta
         * @description Transaction metadata such as block number, block timestamp, etc.
         * @example {
         *   "blockID": "0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215",
         *   "blockNumber": 325324,
         *   "blockTimestamp": 1533267900
         * }
         */
        TxMeta: {
            /**
             * Format: hex
             * @description The block identifier in which the transaction was included.
             * @example 0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215
             */
            blockID?: string
            /**
             * Format: uint32
             * @description The block number (height) of the block in which the transaction was included.
             * @example 325324
             */
            blockNumber?: number
            /**
             * Format: uint64
             * @description The UNIX timestamp of the block in which the transaction was included.
             * @example 1533267900
             */
            blockTimestamp?: number
        }
        /**
         * ReceiptMeta
         * @description The transaction receipt metadata such as block number, block timestamp, etc.
         * @example {
         *   "blockID": "0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215",
         *   "blockNumber": 325324,
         *   "blockTimestamp": 1533267900,
         *   "txID": "0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477",
         *   "txOrigin": "0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d"
         * }
         */
        ReceiptMeta: {
            /**
             * @description The block identifier in which the transaction was included.
             * @example 0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215
             */
            blockID?: string
            /**
             * Format: uint32
             * @description The block number (height) of the block in which the transaction was included.
             * @example 325324
             */
            blockNumber?: number
            /**
             * Format: uint64
             * @description The UNIX timestamp of the block in which the transaction was included.
             * @example 1533267900
             */
            blockTimestamp?: number
            /**
             * Format: hex
             * @description The transaction identifier.
             * @example 0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477
             */
            txID?: string
            /**
             * @description The account from which the transaction was sent.
             *
             * @example 0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d
             */
            txOrigin?: string
        }
        /**
         * LogMeta
         * @description The event or transfer log metadata such as block number, block timestamp, etc.
         */
        LogMeta: {
            /**
             * Format: hex
             * @description The block identifier in which the log was included.
             * @example 0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215
             */
            blockID?: string
            /**
             * Format: uint32
             * @description The block number (height) of the block in which the log was included.
             * @example 325324
             */
            blockNumber?: number
            /**
             * Format: uint64
             * @description The UNIX timestamp of the block in which the log was included.
             * @example 1533267900
             */
            blockTimestamp?: number
            /**
             * Format: hex
             * @description The transaction identifier, from which the log was generated.
             * @example 0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477
             */
            txID?: string
            /**
             * @description The account from which the transaction was sent.
             * @example 0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d
             */
            txOrigin?: string
            /**
             * Format: uint32
             * @description The index of the clause in the transaction, from which the log was generated.
             * @example 0
             */
            clauseIndex?: number
        }
        /** Block */
        Block: {
            /**
             * Format: uint32
             * @description The block number (height).
             * @example 325324
             */
            number?: number
            /**
             * Format: hex
             * @description The block identifier.
             * @example 0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215
             */
            id?: string
            /**
             * Format: uint32
             * @description The RLP encoded block size in bytes
             * @example 373
             */
            size?: number
            /**
             * Format: hex
             * @description The parent block identifier.
             * @example 0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d
             */
            parentID?: string
            /**
             * Format: uint64
             * @description The UNIX timestamp of the block.
             * @example 1533267900
             */
            timestamp?: number
            /**
             * Format: uint64
             * @description The maximum amount of gas that all transactions inside the block are allowed to consume
             * @example 11253579
             */
            gasLimit?: number
            /**
             * Format: hex
             * @description The address assigned by the block proposer to receive the reward (in VTHO)
             * @example 0xb4094c25f86d628fdd571afc4077f0d0196afb48
             */
            beneficiary?: string
            /**
             * Format: uint64
             * @description The actual amount of gas used within the block
             * @example 21000
             */
            gasUsed?: number
            /**
             * Format: uint64
             * @description The accumulated witness number of the chain branch headed by the block
             * @example 1029988
             */
            totalScore?: number
            /**
             * Format: hex
             * @description The root hash of transactions in the block
             * @example 0x89dfd9fcd10c9e53d68592cf8b540b280b72d381b868523223992f3e09a806bb
             */
            txsRoot?: string
            /**
             * Format: uint32
             * @description The supported transaction features bitset
             * @example 0
             */
            txsFeatures?: number
            /**
             * Format: hex
             * @description The root hash for the global state after applying changes in this block
             * @example 0x86bcc6d214bc9d8d0dedba1012a63c8317d19ce97f60c8a2ef5c59bbd40d4261
             */
            stateRoot?: string
            /**
             * Format: hex
             * @description The hash of the transaction receipts trie
             * @example 0x15787e2533c470e8a688e6cd17a1ee12d8457778d5f82d2c109e2d6226d8e54e
             */
            receiptsRoot?: string
            /**
             * @description Whether the block signer voted COM(Commit) in BFT
             * @example true
             */
            com?: boolean
            /**
             * Format: hex
             * @description The address of the block signer
             * @example 0xab7b27fc9e7d29f9f2e5bd361747a5515d0cc2d1
             */
            signer?: string
        }
        /** Clause */
        Clause: {
            /**
             * @description The recipient of the clause. Null indicates contract deployment.
             *
             * @example 0x0000000000000000000000000000456e65726779
             */
            to?: string | null
            /**
             * @description The hexadecimal representation of the amount (wei) of VET to be transferred.
             *
             * @example 0x47ff1f90327aa0f8e
             */
            value?: string
            /**
             * @description The input data for the clause (in bytes).
             *
             * @example 0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db5000000000000
             */
            data?: string
        }
        /** Tx */
        Tx: {
            /**
             * @description The transaction identifier.
             * @example 0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477
             */
            id?: string
            /**
             * @description The address of the origin account.
             * @example 0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d
             */
            origin?: string
            /**
             * @description The address of the sponsor / delegator account.
             * @example null
             */
            delegator?: string | null
            /**
             * Format: uint32
             * @description Byte size of the transaction that is RLP encoded.
             * @example 130
             */
            size?: number
            /**
             * Format: uint8
             * @description The last byte of the genesis block ID.
             * @example 39
             */
            chainTag?: number
            /**
             * @description The first 8 bytes of a referenced block ID.
             * @example 0x0004f6cb730dbd90
             */
            blockRef?: string
            /**
             * Format: uint32
             * @description The expiration of the transaction, represented as the number of blocks after the `blockRef`
             * @example 720
             */
            expiration?: number
            /** @description An array of clauses that are executed by the transaction. */
            clauses?: components['schemas']['Clause'][]
            /**
             * Format: uint8
             * @description The coefficient used to calculate the final gas price of the transaction.
             * @example 0
             */
            gasPriceCoef?: number
            /**
             * Format: uint64
             * @description The max amount of gas that can be used by the transaction.
             * @example 21000
             */
            gas?: number
            /**
             * Format: hex
             * @description The transaction ID that this transaction depends on.
             * @example null
             */
            dependsOn?: string | null
            /**
             * @description The transaction `nonce` is a 64-bit unsigned integer that is determined by the transaction sender.
             *
             * @example 0x29c257e36ea6e72a
             */
            nonce?: string
        }
        /** RawTx */
        RawTx: {
            /**
             * Format: hex
             * @description The raw RLP encoded transaction.
             * @example 0xf901854a880104c9cf34b0f5701ef8e7f8e594058d4c951aa24ca012cef3408b259ac1c69d1258890254beb02d1dcc0000b8c469ff936b00000000000000000000000000000000000000000000000000000000ee6c7f95000000000000000000000000167f6cc1e67a615b51b5a2deaba6b9feca7069df000000000000000000000000000000000000000000000000000000000000136a00000000000000000000000000000000000000000000000254beb02d1dcc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080830469978084cb6b32c5c101b88272da83429a49a354f566dd8c85ba288a7c86d1d3161c0aad6a276a7c9f8e69c14df3d76f0d3442a4f4a2a13d016c32c45e82d5010f27386eeb384dee3d8390c0006adead8b8ce8823c583e1ac15facef8f1cc665a707ade82b3c956a53a2b24e0c03d80504bc4b276b5d067b72636d8e88d2ffc65528f868df2cadc716962978a000
             */
            raw?: string
        }
        /** Event */
        Event: {
            /**
             * @description The address of the contract that produces the event (bytes20).
             *
             * @example 0x0000000000000000000000000000456e65726779
             */
            address?: string
            /**
             * @description Topics are indexed parameters to an event. The first topic is always the event signature.
             *
             * @example [
             *   "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
             *   "0x000000000000000000000000435933c8064b4ae76be665428e0307ef2ccfbd68"
             * ]
             */
            topics?: string[]
            /**
             * @description The data associated with the event.
             *
             * @example 0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8
             */
            data?: string
        }
        /** Transfer */
        Transfer: {
            /**
             * @description The address that sent the VET.
             *
             * @example 0x5034aa590125b64023a0262112b98d72e3c8e40e
             */
            sender?: string
            /**
             * @description The address that received the VET.
             *
             * @example 0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa
             */
            recipient?: string
            /**
             * @description The amount of VET transferred.
             *
             * @example 0x47fdb3c3f456c0000
             */
            amount?: string
        }
        /** Receipt */
        Receipt: {
            /**
             * Format: uint64
             * @description The amount of gas used by the transaction.
             *
             * @example 21000
             */
            gasUsed?: number
            /**
             * @description The address of the account that paid the gas fee.
             *
             * @example 0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d
             */
            gasPayer?: string
            /**
             * @description The amount of energy (VTHO) in wei, used to pay for the gas.
             * @example 0x1236efcbcbb340000
             */
            paid?: string
            /**
             * @description The amount of energy (VTHO) in wei, paid to the block signer as a reward.
             * @example 0x576e189f04f60000
             */
            reward?: string
            /**
             * @description Indicates whether the transaction was reverted (true means reverted).
             *
             * @example false
             */
            reverted?: boolean
            /** @description An array of outputs produced by the transaction. */
            outputs?: {
                /**
                 * @description The address of the deployed contract, if the corresponding clause is a
                 * contract deployment clause.
                 *
                 * @example 0x0000000000000000000000000000456e65726779
                 */
                contractAddress?: string
                events?: components['schemas']['Event'][]
                transfers?: components['schemas']['Transfer'][]
            }[]
        }
        /** CallData */
        CallData: {
            /**
             * @description The amount of token to be transferred.
             *
             * @example 0x47ff1f90327aa0f8e
             */
            value?: string
            /**
             * @description The input data for the contract call.
             *
             * @example 0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db5000000000000
             */
            data?: string
            /**
             * @description The recipient of the call. Null indicates contract deployment.
             *
             * @example 0x0000000000000000000000000000456e65726779
             */
            to?: string | null
            /**
             * Format: uint64
             * @description The maximum allowed gas for execution.
             *
             * @example 21000
             */
            gas?: number | null
            /**
             * @description The absolute gas price.
             *
             * @example 1000000000000000
             */
            gasPrice?: string | null
            /**
             * @description The caller's address (msg.sender).
             *
             * @example 0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa
             */
            caller?: string | null
        }
        /** ExtendedCallData */
        ExtendedCallData: {
            /**
             * @description The transaction's proved work (for extension contract).
             *
             * @example 1000
             */
            provedWork?: string | null
            /**
             * @description The address of the gas payer (for extension contract).
             *
             * @example 0xd3ae78222beadb038203be21ed5ce7c9b1bff602
             */
            gasPayer?: string | null
            /**
             * Format: uint32
             * @description The transaction expiration (for extension contract).
             *
             * @example 1000
             */
            expiration?: number | null
            /**
             * @description The block reference (for extension contract).
             *
             * @example 0x00000000851caf3c
             */
            blockRef?: string | null
        }
        /** CallResult */
        CallResult: {
            /**
             * @description The output data produced by the contract execution.
             *
             * @example 0x0000000000000000000000000000000000000000000000000000000000000001
             */
            data?: string
            /** @description An array of events generated during contract execution. */
            events?: components['schemas']['Event'][]
            /** @description An array of transfers that occurred during contract execution. */
            transfers?: components['schemas']['Transfer'][]
            /**
             * Format: uint64
             * @description The amount of gas used during execution.
             *
             * @example 21000
             */
            gasUsed?: number
            /**
             * @description Indicates whether the transaction was reverted (true means reverted).
             *
             * @example false
             */
            reverted?: boolean
            /**
             * @description The virtual machine error message if the execution encountered an error.
             *
             * @example insufficient balance for transfer
             */
            vmError?: string
        }
        /**
         * BatchCallData
         * @example {
         *   "clauses": [
         *     {
         *       "to": "0x5034aa590125b64023a0262112b98d72e3c8e40e",
         *       "value": "0xde0b6b3a7640000",
         *       "data": "0x5665436861696e2054686f72"
         *     }
         *   ],
         *   "gas": 50000,
         *   "gasPrice": "1000000000000000",
         *   "caller": "0x7567d83b7b8d80addcb281a71d54fc7b3364ffed"
         * }
         */
        BatchCallData: {
            /** @description An array of clauses to be executed. */
            clauses?: components['schemas']['Clause'][] | null
            /**
             * Format: uint64
             * @description The maximum allowed gas for the execution of the batch call.
             *
             * @example 50000
             */
            gas?: number | null
            /**
             * @description The absolute gas price for the batch call.
             *
             * @example 1000000000000000
             */
            gasPrice?: string | null
            /**
             * @description The caller's address (msg.sender) for the batch call.
             *
             * @example 0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa
             */
            caller?: string | null
        }
        /** BatchCallResult */
        BatchCallResult: components['schemas']['CallResult'][]
        /**
         * FilterOptions
         * @description Include these parameters to receive filtered results in a paged format.
         *
         * <b>Note: </b> If omitted, a timeout may occur if there is a large amount of data to query. If there is a small amount of data you can omit to receive all results in a single response.
         *
         * Example:
         * ```json
         * {
         *   "options": {
         *     "offset": 0,
         *     "limit": 10
         *   }
         * }
         * ```
         * In this example, the page offset is 0, and the page size is 10.
         */
        FilterOptions: {
            /**
             * @description The offset in the matched record set. Use this parameter for pagination.
             *
             * Default's to 0.
             *
             * @example 0
             */
            offset?: number | null
            /**
             * @description The limit of records to be included in the output. Use this parameter for pagination.
             *
             * Default's to all results.
             *
             * @example 100
             */
            limit?: number | null
        } | null
        /**
         * FilterRange
         * @description Defines the range for filtering. Setting values to null indicates the entire range.
         *
         * <b>Note: </b> If omitted or set to null, a timeout may occur if there is a large amount of data to query.
         *
         * Example:
         * ```json
         * {
         *   "range": {
         *     "unit": "block",
         *     "from": 10,
         *     "to": 1000
         *   }
         * }
         * ```
         * This refers to the range from block 10 to block 1000.
         */
        FilterRange: {
            /**
             * @description Specifies the unit of measurement for the `from` and `to` values.
             * Use `block` for block numbers or `time` for block timestamps. Default is `block`.
             *
             * @example block
             * @enum {string|null}
             */
            unit?: 'block' | 'time' | null
            /**
             * Format: uint64
             * @description Defines the starting block number or timestamp for the specified range.
             *
             * @example 17240365
             */
            from?: number | null
            /**
             * Format: uint64
             * @description Specifies the ending block number or timestamp for the specified range.
             *
             * @example 17289864
             */
            to?: number | null
        } | null
        /**
         * EventCriteria
         * @description Criteria to filter events. All fields are joined with the `AND` operator.
         * `null` fields are ignored.
         *
         * Example:
         * ```json
         * {
         *   "address": "0x0000000000000000000000000000456E65726779",
         *   "topic0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
         * }
         * ```
         *
         * This matches events emitted by `0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa` with `topic0` equal to `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
         *
         * @example {
         *   "address": "0x0000000000000000000000000000456E65726779",
         *   "topic0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
         *   "topic1": "0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa"
         * }
         */
        EventCriteria: {
            /**
             * @description The address of the contract that emits the event.
             *
             * @example 0x0000000000000000000000000000456E65726779
             */
            address?: string | null
            /**
             * @description The keccak256 hash representing the event signature.
             * For example, the signature for the `Transfer` event is `keccak256("Transfer(address,address,uint256)")`.
             *
             * @example 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
             */
            topic0?: string | null
            /**
             * @description Filters events based on the 1st parameter in the event.
             *
             * <b>Note</b>: The parameter must be padded to 32 bytes.
             *
             * For example, for the event `MySolidityEvent(address,uint256)`, use `topic1` to match the `address` parameter.
             *
             * @example 0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa
             */
            topic1?: string | null
            /**
             * @description Filters events based on the 2nd parameter in the event.
             *
             * <b>Note</b>: The parameter must be padded to 32 bytes.
             *
             * For example, for the event `MySolidityEvent(address,uint256)`, use `topic2` to match the `uint256` parameter.
             *
             * @example 0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa
             */
            topic2?: string | null
            /**
             * @description Filters events based on the 3rd parameter in the event.
             *
             * <b>Note</b>: The parameter must be padded to 32 bytes.
             *
             * For example, for the event `MySolidityEvent(address,address,uint256)`, use `topic3` to match the `uint256` parameter.
             *
             * @example 0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa
             */
            topic3?: string | null
            /**
             * @description Filters events based on the 4th parameter in the event.
             *
             * <b>Note</b>: The parameter must be padded to 32 bytes.
             *
             * For example, for the event `MySolidityEvent(address,address,address,uint256)`, use `topic4` to match the `uint256` parameter.
             *
             * @example 0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa
             */
            topic4?: string | null
        }
        /** TransferCriteria */
        TransferCriteria: {
            /**
             * @description The address from which the transaction was sent.
             *
             * @example 0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa
             */
            txOrigin?: string | null
            /**
             * @description The address that sent the VET. In most cases this is the same as `txOrigin`, but it may be different if the VET was sent by a contract.
             *
             * @example 0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa
             */
            sender?: string | null
            /**
             * @description The address that received the VET.
             *
             * @example 0x45429a2255e7248e57fce99e7239aed3f84b7a53
             */
            recipient?: string | null
        }
        /** PeerStats */
        PeerStats: {
            /**
             * @description The identifier and version of the connected peer's software.
             * @example thor/v1.0.0-6680b98-dev/linux/go1.10.3
             */
            name?: string
            /**
             * @description The identifier of the best block known to the connected peer.
             * @example 0x000087b3a4d4cdf1cc52d56b9704f4c18f020e1b48dbbf4a23d1ee4f1fa5ff94
             */
            bestBlockID?: string
            /**
             * @description The total score of the connected peer.
             * @example 68497
             */
            totalScore?: number
            /**
             * @description The unique identifier of the connected peer on the network.
             * @example 50e122a505ee55b84331068acfd857e37ad58f463a0fab9aaff2c1e4b2e2d22ae71dc14fdaf6eead74bd3f60594644aa35c588f9ca6be3341e2ce18ddc413321
             */
            peerID?: string
            /**
             * @description The network address (IP:Port) of the connected peer.
             * @example 128.1.39.120:11235
             */
            netAddr?: string
            /**
             * @description Indicates whether the connection is inbound (true) or outbound (false).
             * @example false
             */
            inbound?: boolean
            /**
             * @description The duration of the connection with the peer.
             * @example 28
             */
            duration?: number
        }
        /**
         * TXID
         * @example {
         *   "id": "0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8"
         * }
         */
        TXID: {
            /**
             * @description The transaction identifier.
             *     example:
             *
             * @example 0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8
             */
            id?: string
        }
        /**
         * Obsolete
         * @example {
         *   "obsolete": false
         * }
         */
        Obsolete: {
            /**
             * @description Indicates whether the block containing this data has become obsolete (true) or not (false).
             *
             * @example false
             */
            obsolete?: boolean
        }
        /**
         * ClauseTracerOption
         * @example {
         *   "target": "0x010709463c1f0c9aa66a31182fb36d1977d99bfb6526bae0564a0eac4006c31a/0/0"
         * }
         */
        ClauseTracerOption: {
            /**
             * @description The unified path of the target to be traced. Currently, only the clause is supported.
             *
             * Format:
             * `blockID/(txIndex|txId)/clauseIndex`
             *
             * @example 0x010709463c1f0c9aa66a31182fb36d1977d99bfb6526bae0564a0eac4006c31a/0/0
             */
            target?: string
        }
        /**
         * TracerOption
         * @example {
         *   "name": "prestate",
         *   "config": {}
         * }
         */
        TracerOption: {
            /**
             * @description The name of the tracer. An empty name stands for the default struct logger tracer.
             *
             * @example prestate
             * @enum {string|null}
             */
            name?:
                | ''
                | '4byte'
                | 'call'
                | 'noop'
                | 'prestate'
                | 'unigram'
                | 'bigram'
                | 'trigram'
                | 'evmdis'
                | 'opcount'
                | null
            /**
             * @description The configuration of the tracer. It is specific to the `name`
             *
             * @example {}
             */
            config?: unknown
        }
        /** StorageRangeOption */
        StorageRangeOption: {
            /**
             * @description The address of the contract/ account to be traced.
             *
             * @example 0xd8ccdd85abdbf68dfec95f06c973e87b1b5a9997
             */
            address?: string
            /**
             * @description The start key of the storage range. Default is `0x0000000000000000000000000000000000000000000000000000000000000000`
             *
             * @example 0x0000000000000000000000000000000000000000000000000000000000000000
             */
            keyStart?: string | null
            /**
             * @description The maximum number of results to be returned. Default is 1000.
             *
             * @example 10
             */
            maxResult?: number | null
            /**
             * @description The unified path of the transaction clause.
             *
             * Format:
             * `blockID/(txIndex|txId)/clauseIndex`
             *
             * @example 0x010709463c1f0c9aa66a31182fb36d1977d99bfb6526bae0564a0eac4006c31a/0/0
             */
            target?: string
        }
        /** StorageRange */
        StorageRange: {
            /** @example null */
            nextKey?: string | null
            /**
             * @description The data is non-nullable, but an empty object is returned if no data is found.
             *
             * @example {
             *   "0x33e423980c9b37d048bd5fadbd4a2aeb95146922045405accc2f468d0ef96988": {
             *     "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
             *     "value": "0x00000000000000000000000000000000000000000000000000000000000000c8"
             *   }
             * }
             */
            storage?: Record<string, never>
        }
        /** IsTrunk */
        IsTrunk: {
            /**
             * @description Whether the block is trunk (true) or not (false)
             * @example true
             */
            isTrunk?: boolean
        }
        /** IsFinalized */
        IsFinalized: {
            /**
             * @description Whether the block has been finalized (true) or not (false)
             * @example false
             */
            isFinalized?: boolean
        }
    }
    responses: never
    parameters: {
        /**
         * @description The address of the account/ contract
         * @example 0x0000000000000000000000000000456E65726779
         */
        GetAddressInPath: string
        /**
         * @description The address of the account/ contract
         * @example 0x93Ae8aab337E58A6978E166f8132F59652cA6C56
         */
        GetStorageAddressInPath: string
        /**
         * @description Whether the response should include a raw transaction represented in hexadecimal format.
         * @example false
         */
        RawTxInQuery?: boolean
        /** @description Specify either `best`, a block number or block ID. If omitted, the `best` block is assumed. */
        RevisionInQuery?: string
        /**
         * @description
         * Revision can be one of:
         * - a block ID (hex string)
         * - a block number (integer)
         * - `best` stands for latest block
         * - `finalized` stands for the finalized block
         *
         * @example best
         */
        RevisionInPath: string
        /** @description Explicitly define the ID of the head block. Best block is assumed if omitted. */
        HeadInQuery?: string
        /**
         * @description The unique identifier (key) representing the specific position in the account storage.
         * This key is used to access and retrieve data stored at a particular storage position.
         *
         * @example 0x0000000000000000000000000000000000000000000000000000000000000001
         */
        StorageKeyInPath: string
        /**
         * @description The order of the results. Use `asc` for ascending order, and `desc` for descending order.
         *
         * @example asc
         */
        FilterOrderInQuery?: 'asc' | 'desc'
        /**
         * @description The transaction ID
         * @example 0xb6b5b47a5eee8b14e5222ac1bb957c0bbdc3d489850b033e3e544d9ca0cef934
         */
        TxIDInPath: string
        /**
         * @description A saved block ID for resuming the subscription. If omitted, the best block ID is assumed.
         *
         * **Note**: If the provided position is too far behind the best block, a 403 error will be thrown. The allowable difference depends on the configuration of each node.
         *
         * See the argument `api-backtrace-limit` when starting a node.
         */
        PositionInQuery?: string
        /**
         * @description Whether the returned block is expanded.
         * - `true` returns `transactions` as an array of objects with the transaction details and outputs
         * - `false` returns `transactions` as an array of transaction IDs (hex strings)
         *
         * @example false
         */
        ExpandedInQuery?: boolean
        /**
         * @description Allows you to indicate whether the response should include transactions that are still pending
         *
         * @example false
         */
        PendingInQuery?: boolean
        /**
         * @description The address of the contract that emits the event.
         *
         * @example 0x0000000000000000000000000000456E65726779
         */
        AddrInQuery?: string
        /**
         * @description The keccak256 hash representing the event signature.
         * For example, the signature for the `Transfer` event is `keccak256("Transfer(address,address,uint256)")`.
         *
         * @example 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
         */
        Topic0InQuery?: string
        /**
         * @description Filters events based on the 1st parameter in the event.
         *
         * <b>Note</b>: The parameter must be padded to 32 bytes.
         *
         * For example, for the event `MySolidityEvent(address,uint256)`, use `t1` to match the `address` parameter.
         *
         * @example 0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa
         */
        Topic1InQuery?: string
        /**
         * @description Filters events based on the 2nd parameter in the event.
         *
         * <b>Note</b>: The parameter must be padded to 32 bytes.
         *
         * For example, for the event `MySolidityEvent(address,uint256)`, use `t2` to match the `uint256` parameter.
         *
         * @example 0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa
         */
        Topic2InQuery?: string
        /**
         * @description Filters events based on the 3rd parameter in the event.
         *
         * <b>Note</b>: The parameter must be padded to 32 bytes.
         *
         * For example, for the event `MySolidityEvent(address,address,uint256)`, use `t3` to match the `uint256` parameter.
         *
         * @example 0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa
         */
        Topic3InQuery?: string
        /**
         * @description Filters events based on the 4th parameter in the event.
         *
         * <b>Note</b>: The parameter must be padded to 32 bytes.
         *
         * For example, for the event `MySolidityEvent(address,address,address,uint256)`, use `t4` to match the `uint256` parameter.
         *
         * @example 0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa
         */
        Topic4InQuery?: string
        /**
         * @description The address from which the transaction was sent.
         *
         * @example 0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa
         */
        TxOriginInQuery?: string
        /**
         * @description The address that sent the VET. In most cases this is the same as `txOrigin`, but it may be different if the VET was sent by a contract.
         *
         * @example 0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa
         */
        TransferSenderInQuery?: string
        /**
         * @description The address that received the VET.
         *
         * @example 0x45429a2255e7248e57fce99e7239aed3f84b7a53
         */
        TransferRecipientInQuery?: string
    }
    requestBodies: never
    headers: never
    pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export type operations = Record<string, never>
